problems
========
- aliasing: compiler can not see, that payload is a pointer to the msg object.
  msg must be saved in state struct, although it is not accessed after the
  blocking call! What to do? 
  - Conservatie approach: keep everything in state struct. 
  - add variables which are passed by pointer to a blocking function to the state struct.
  - provide meta-information to the blocking functions.

- not only variables which are written to before and read from after a blocking
  call must be saved in the state struct. Additionally variables which are used
  in more than one sub-function must be in the state struct.

PAL
====
- PAL must be partially generated because it depends on the number of threads
- no guarantee that callee returns before continuation is called!
- meta-information, which parameter remains in the parameter list.
- PAL can become inefficient, but this depends on the OS' API, not on the general concept of code generation
- PAL API may differ from thread API if semantics of raw API and thread API do not (efficiently) fit together.
  - example: receive_receive: the provider of the raw API returns a pointer to
    a message and the user of the thread API provides a differnt pointer, to
	store the message in. The PAL impl provides the thread API but uses the raw
    API. Without copying there is no way to do so.

optimization
============
- sometimes caller can operate directly on the state struct of the callee instead of instantiating it's own copies of the variable.
- thread-id mapping can omitted if there is only one caller
- storing the continuation can be omitted if there is only one caller
- on call of blocking functions, parameters which go to the state struct anyway
  are directly stored there by the caller instead of passing them as normal
  parameters.
- sub-functions which do nothing but call another sub-function can be omitted (e.g. receive_run_4)
- for the union optimization, map should return the pointer to the state
  struct, because different elements of an array could go into different
  unions.

open questions
==============
 - order of code/generation of forward declarations.
 - if tc-input is output from cpp, then some magic is already applied. For
   example assert is expanded to a line including the line number. In ec-code
   this line number is no longer valid. How to fix this?
    - maybe provide a different implementation for assert?

