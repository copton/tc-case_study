feed this to scripts/count-cycles.py

00 <part>:
 280:	cf 92       	push	r12
 282:	df 92       	push	r13
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	24 97       	sbiw	r28, 0x04	; 4
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	80 91 f5 04 	lds	r24, 0x04F5
 2a4:	90 91 f6 04 	lds	r25, 0x04F6
 2a8:	01 97       	sbiw	r24, 0x01	; 1
 2aa:	c1 f4       	brne	.+48     	; 0x2dc <readDone+0x5c>

00 <if>:
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	9f ef       	ldi	r25, 0xFF	; 255
 2b0:	af ef       	ldi	r26, 0xFF	; 255
 2b2:	bf e7       	ldi	r27, 0x7F	; 127
 2b4:	80 93 f9 02 	sts	0x02F9, r24
 2b8:	90 93 fa 02 	sts	0x02FA, r25
 2bc:	a0 93 fb 02 	sts	0x02FB, r26
 2c0:	b0 93 fc 02 	sts	0x02FC, r27
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	9f ef       	ldi	r25, 0xFF	; 255
 2c8:	af ef       	ldi	r26, 0xFF	; 255
 2ca:	bf ef       	ldi	r27, 0xFF	; 255
 2cc:	80 93 fd 02 	sts	0x02FD, r24
 2d0:	90 93 fe 02 	sts	0x02FE, r25
 2d4:	a0 93 ff 02 	sts	0x02FF, r26
 2d8:	b0 93 00 03 	sts	0x0300, r27

00 <part>:
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	e1 e0       	ldi	r30, 0x01	; 1
 2e2:	f3 e0       	ldi	r31, 0x03	; 3
 2e4:	6a 01       	movw	r12, r20
 2e6:	d6 94       	lsr	r13
 2e8:	c7 94       	ror	r12
 2ea:	d6 94       	lsr	r13
 2ec:	c7 94       	ror	r12
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	9a 81       	ldd	r25, Y+2	; 0x02
 2f2:	ab 81       	ldd	r26, Y+3	; 0x03
 2f4:	bc 81       	ldd	r27, Y+4	; 0x04
 2f6:	e0 90 f9 02 	lds	r14, 0x02F9
 2fa:	f0 90 fa 02 	lds	r15, 0x02FA
 2fe:	00 91 fb 02 	lds	r16, 0x02FB
 302:	10 91 fc 02 	lds	r17, 0x02FC
 306:	20 91 fd 02 	lds	r18, 0x02FD
 30a:	30 91 fe 02 	lds	r19, 0x02FE
 30e:	40 91 ff 02 	lds	r20, 0x02FF
 312:	50 91 00 03 	lds	r21, 0x0300
 316:	15 c0       	rjmp	.+42     	; 0x342 <readDone+0xc2>

00 <for>:
 318:	80 81       	ld	r24, Z
 31a:	91 81       	ldd	r25, Z+1	; 0x01
 31c:	a2 81       	ldd	r26, Z+2	; 0x02
 31e:	b3 81       	ldd	r27, Z+3	; 0x03
 320:	8e 15       	cp	r24, r14
 322:	9f 05       	cpc	r25, r15
 324:	a0 07       	cpc	r26, r16
 326:	b1 07       	cpc	r27, r17
 328:	14 f4       	brge	.+4      	; 0x32e <readDone+0xae>
 32a:	7c 01       	movw	r14, r24
 32c:	8d 01       	movw	r16, r26
 32e:	28 17       	cp	r18, r24
 330:	39 07       	cpc	r19, r25
 332:	4a 07       	cpc	r20, r26
 334:	5b 07       	cpc	r21, r27
 336:	14 f4       	brge	.+4      	; 0x33c <readDone+0xbc>
 338:	9c 01       	movw	r18, r24
 33a:	ad 01       	movw	r20, r26
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	34 96       	adiw	r30, 0x04	; 4
 342:	6c 15       	cp	r22, r12
 344:	7d 05       	cpc	r23, r13
 346:	40 f3       	brcs	.-48     	; 0x318 <readDone+0x98>

00 <part>:
 348:	20 93 fd 02 	sts	0x02FD, r18
 34c:	30 93 fe 02 	sts	0x02FE, r19
 350:	40 93 ff 02 	sts	0x02FF, r20
 354:	50 93 00 03 	sts	0x0300, r21
 358:	e0 92 f9 02 	sts	0x02F9, r14
 35c:	f0 92 fa 02 	sts	0x02FA, r15
 360:	00 93 fb 02 	sts	0x02FB, r16
 364:	10 93 fc 02 	sts	0x02FC, r17
 368:	89 83       	std	Y+1, r24	; 0x01
 36a:	9a 83       	std	Y+2, r25	; 0x02
 36c:	ab 83       	std	Y+3, r26	; 0x03
 36e:	bc 83       	std	Y+4, r27	; 0x04
 370:	80 91 f5 04 	lds	r24, 0x04F5
 374:	90 91 f6 04 	lds	r25, 0x04F6
 378:	01 97       	sbiw	r24, 0x01	; 1
 37a:	69 f4       	brne	.+26     	; 0x396 <readDone+0x116>

00 <if>:
 37c:	4a ef       	ldi	r20, 0xFA	; 250
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	73 e0       	ldi	r23, 0x03	; 3
 384:	80 91 f7 02 	lds	r24, 0x02F7
 388:	90 91 f8 02 	lds	r25, 0x02F8
 38c:	0e 94 75 02 	call	0x4ea	; 0x4ea <logr_read>
 390:	82 e0       	ldi	r24, 0x02	; 2
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	2d c0       	rjmp	.+90     	; 0x3f0 <readDone+0x170>

00 <else>:
 396:	48 e0       	ldi	r20, 0x08	; 8
 398:	6b ef       	ldi	r22, 0xFB	; 251
 39a:	73 e0       	ldi	r23, 0x03	; 3
 39c:	80 91 f3 02 	lds	r24, 0x02F3
 3a0:	90 91 f4 02 	lds	r25, 0x02F4
 3a4:	0e 94 9f 02 	call	0x53e	; 0x53e <send_getPayload>
 3a8:	fc 01       	movw	r30, r24
 3aa:	80 91 f9 02 	lds	r24, 0x02F9
 3ae:	90 91 fa 02 	lds	r25, 0x02FA
 3b2:	a0 91 fb 02 	lds	r26, 0x02FB
 3b6:	b0 91 fc 02 	lds	r27, 0x02FC
 3ba:	80 83       	st	Z, r24
 3bc:	91 83       	std	Z+1, r25	; 0x01
 3be:	a2 83       	std	Z+2, r26	; 0x02
 3c0:	b3 83       	std	Z+3, r27	; 0x03
 3c2:	80 91 fd 02 	lds	r24, 0x02FD
 3c6:	90 91 fe 02 	lds	r25, 0x02FE
 3ca:	a0 91 ff 02 	lds	r26, 0x02FF
 3ce:	b0 91 00 03 	lds	r27, 0x0300
 3d2:	84 83       	std	Z+4, r24	; 0x04
 3d4:	95 83       	std	Z+5, r25	; 0x05
 3d6:	a6 83       	std	Z+6, r26	; 0x06
 3d8:	b7 83       	std	Z+7, r27	; 0x07
 3da:	48 e0       	ldi	r20, 0x08	; 8
 3dc:	6b ef       	ldi	r22, 0xFB	; 251
 3de:	73 e0       	ldi	r23, 0x03	; 3
 3e0:	80 91 f3 02 	lds	r24, 0x02F3
 3e4:	90 91 f4 02 	lds	r25, 0x02F4
 3e8:	0e 94 96 02 	call	0x52c	; 0x52c <send_send>
 3ec:	83 e0       	ldi	r24, 0x03	; 3
 3ee:	90 e0       	ldi	r25, 0x00	; 0

00 <part>:
 3f0:	90 93 f6 04 	sts	0x04F6, r25
 3f4:	80 93 f5 04 	sts	0x04F5, r24
 3f8:	24 96       	adiw	r28, 0x04	; 4
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	f8 94       	cli
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	0f be       	out	0x3f, r0	; 63
 402:	cd bf       	out	0x3d, r28	; 61
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	1f 91       	pop	r17
 40a:	0f 91       	pop	r16
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	08 95       	ret

for loop runs 12 times. according to the current timing configuration there are
2 messages from the receive task and 4 messages from the collect task every 2
seconds. And there are 2 numbers per message.

case state == WAIT_LOGR_1:
    part, 32
    if, 24
    part#2, 35
    for, 30  x 12
    part#3, 31
    if#2, 16
    part#4, 31
=> 529

case else:
    part, 32
    part#2, 35
    for, 30  x 12
    part#3, 31
    else, 57
    part#4, 31
=> 581
